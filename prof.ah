#ifndef __PROF_AH__
#define __PROF_AH__

#include <map>
#include <vector>
#include <ctime>
#include <string>
#include <cassert>
#include <iostream>

struct TRunningInfo {
   time_t fStartTime;
   unsigned long fReferenceCount;
};

struct TTotalInfo {
   unsigned long fTotalTime;
   unsigned long fCalls;
   TTotalInfo(unsigned long totalTime, unsigned long calls) : fTotalTime(totalTime), fCalls(calls) { };
};

struct TCallInfo {
   TCallInfo * fParent;
   TCallInfo * fNeighbor;
   std::string fFunction;
   bool fHasChild;
   TCallInfo(TCallInfo * parent, TCallInfo * neighbor, const std::string & function) :
      fParent(parent), fNeighbor(neighbor), fFunction(function), fHasChild(false) {};
};

aspect TProfiler {
   pointcut functions() = "% ...::%(...)";

   advice execution(functions()) : before() {
      TRunningInfo info;
      time_t now = time(0);
      std::string function = JoinPoint::signature();
      std::map<std::string, TRunningInfo>::iterator desc = fCurrent.find(function);

      if (desc != fCurrent.end()) {
         // Handle recursive calls
         info = desc->second;
      } else {
         info.fStartTime = now;
         info.fReferenceCount = 0;
      }

      ++info.fReferenceCount;
      fCurrent.insert(desc, std::pair<std::string, TRunningInfo>(function, info));

      // Complete call graph
      if (fParent) {
         // We're not a level 0
         assert(fLevel > 0);

         // Only insert if not recursive call
         if (function != fParent->fFunction) {
            // Check whether we are already in
            TCallInfo * child = 0;
            if (fCalls.size() > fLevel + 1) {
               child = fCalls[fLevel];
            }

            // Browse every possible entry
            if (child) {
               for (; child; child = child->fNeighbor) {
                  if (child->fFunction == function) {
                     break;
                  }
               }
            }

            // Now, we have a room for insertion
            if (child == 0) {
               child = new TCallInfo(fParent, 0, function);
               if (fCalls.size() > fLevel + 1) {
                  TCallInfo * same = fCalls[fLevel];
                  child->fNeighbor = same->fNeighbor;
                  same->fNeighbor = child;
               } else {
                  fCalls.insert(fCalls.end(), child);
               }
               // Ensure parent has child
               fParent->fHasChild = true;
               // Jump level
               ++fLevel;
               // Switch parent
               fParent = child;
            }
         }
      } else {
         // If no parent -> level == 0
         assert(fLevel == 0);
         // Also means no child
         assert(fCalls.size() == 0);

         fParent = new TCallInfo(0, 0, function);
         fCalls.insert(fCalls.end(), fParent);
         // Jump level
         ++fLevel;
      }
   }

   advice execution(functions()) : after() {
      TRunningInfo info;
      time_t now = time(0);
      std::string function = JoinPoint::signature();
      std::map<std::string, TRunningInfo>::iterator desc = fCurrent.find(function);

      assert(desc != fCurrent.end());

      info = desc->second;
      --info.fReferenceCount;

      // Are we done?
      if (info.fReferenceCount == 0) {
         std::map<std::string, TTotalInfo>::iterator tot = fTotal.find(function);

         if (tot == fTotal.end()) {
            TTotalInfo total(now - info.fStartTime, 1);
            fTotal.insert(std::pair<std::string, TTotalInfo>(function, total));
         } else {
            tot->second.fTotalTime += (now - info.fStartTime);
            ++tot->second.fCalls;
         }

         // Decrease level
         --fLevel;
         // Change parent
         fParent = fParent->fParent;
      }
   }

   TProfiler() {
      fLevel = 0;
      fParent = 0;
   }

   ~TProfiler() {
      // Display data at the end
      for (std::map<std::string, TTotalInfo>::const_iterator tot = fTotal.begin();
           tot != fTotal.end(); ++tot) {
         std::cout << "Function: " << tot->first.c_str() << ", calls: " << tot->second.fCalls;
         std::cout << ", total time: " << tot->second.fTotalTime << std::endl;
      }

      // Display graphs at the end
      assert(fLevel == 0 && !fCalls.empty());
      for (int level = fCalls.size() - 1; level >= 0; --level) {
         TCallInfo * child = fCalls[level];
         while (child != 0) {
            // No child -> display and head back
            if (!child->fHasChild) {
               TCallInfo * parent = child;
               while (parent != 0) {
                  std::string function = parent->fFunction;
                  std::cout << function;

                  parent = parent->fParent;
                  if (parent != 0) {
                     std::cout << " <- ";
                  } else {
                     std::cout << std::endl;
                  }
               }
            }

            // Release and go to the next
            TCallInfo * next = child->fNeighbor;
            delete child;
            child = next;
         }
      }
   }

private:
   std::map<std::string, TRunningInfo> fCurrent;
   std::map<std::string, TTotalInfo> fTotal;
   std::vector<TCallInfo *> fCalls;
   unsigned int fLevel;
   TCallInfo * fParent;
};

#endif
